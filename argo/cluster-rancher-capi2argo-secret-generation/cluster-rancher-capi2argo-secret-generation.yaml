apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: cluster-rancher-capi2argo-secret-generation
  annotations:
    policies.kyverno.io/title: Cluster Secret Generation From Rancher
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Cluster
    kyverno.io/kyverno-version: 1.7.0
    policies.kyverno.io/minversion: 1.7.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy generates and synchronizes ArgoCD cluster secrets from Rancher 
      managed cluster CAPI secrets. Adding Rancher managed clusters to Argo CD does
      not work out of the box unless the Authorized Cluster Endpoint is used.
      Many users will prefer an integration of Argo CD via the central Rancher
      authentication proxy (which shares the network endpoint of the Rancher API/GUI).
      This policy implements such integration.
spec:
  generateExistingOnPolicyUpdate: true
  background: true
  rules:
    - name: source-rancher-non-local-capi-secret
      match:
        any:
        - resources:
            kinds:
            - Secret
            names:
            - "*-kubeconfig"
            selector:
              matchExpressions:key: 
              - key: "cluster.x-k8s.io/cluster-name"
                operator: Exists
      exclude:
        any:
        - resources:
            namespaces:
            - fleet-local
      context:
      - name: clusterName
        variable:
          value: "{{ replace_all('{{request.object.metadata.name}}', '-kubeconfig', '') }}"
      - name: serverName
        apiCall:
          urlPath: "/api/v1/namespaces/{{request.object.metadata.namespace}}/secrets/{{request.object.metadata.name}}"
          jmesPath: "data.value | base64_decode(@) | parse_yaml(@) | clusters[0].cluster.server"
      - name: bearerToken
        apiCall:
          urlPath: "/api/v1/namespaces/{{request.object.metadata.namespace}}/secrets/{{request.object.metadata.name}}"
          jmesPath: "data.token | base64_decode(@)"
      - name: caData
        apiCall:
          urlPath: "/api/v1/namespaces/{{request.object.metadata.namespace}}/secrets/{{request.object.metadata.name}}"
          jmesPath: "data.value | base64_decode(@) | parse_yaml(@) | clusters[0].cluster.certificate-authority-data"
      generate:
        kind: Secret
        apiVersion: v1
        type: Opaque
        metadata:
          labels:
            argocd.argoproj.io/secret-type: cluster
            clusterId: "{{ clusterName }}"
          name: "cluster-{{ clusterName }}"
          namespace: argocd
        stringData:
          name: "cluster-{{ clusterName }}"
          server: "{{ serverName }}"
          config: |
            {
              "bearerToken": "{{ bearerToken }}",
              "tlsClientConfig": {
                "insecure": false,
                "caData": "{{ caData }}"
              }
            }
