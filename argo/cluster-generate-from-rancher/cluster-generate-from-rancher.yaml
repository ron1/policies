apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: cluster-generate-from-rancher
  annotations:
    policies.kyverno.io/title: Cluster Secret Generation From Rancher
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Cluster
    kyverno.io/kyverno-version: 1.7.0
    policies.kyverno.io/minversion: 1.7.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy generates and synchronizes ArgoCD cluster secrets from Rancher 
      managed cluster CAPI secrets. Adding Rancher managed clusters to Argo CD does
      not work out of the box unless the Authorized Cluster Endpoint is used.
      Many users will prefer an integration of Argo CD via the central Rancher
      authentication proxy (which shares the network endpoint of the Rancher API/GUI).
      This policy implements such integration.
spec:
  generateExistingOnPolicyUpdate: true
  rules:
    - name: source-rancher-non-local-capi-secret
      match:
        all:
        - resources:
            kinds:
            - Secret
            names:
            - "*-kubeconfig"
# Waiting on Rancher issue: https://github.com/rancher/rancher/issues/38053
#            selector:
#              matchExpressions:
#              - key: "cluster.x-k8s.io/cluster-name"
#                operator: Exists
#
# Temporary, inefficient solution until above Rancher issue is resolved
            namespaces:
            - "fleet-*"
            annotations:
              objectset.rio.cattle.io/owner-gvk: provisioning.cattle.io/v1, Kind=Cluster
      exclude:
        any:
        - resources:
            namespaces:
            - fleet-local
      context:
      - name: clusterName
        variable:
          value: "{{ replace_all('{{request.object.metadata.name}}', '-kubeconfig', '') }}"
          jmesPath: 'to_string(@)'
      - name: clusterPrefixedName
        variable:
          value: "{{ join('-', ['cluster', clusterName]) }}"
          jmesPath: 'to_string(@)'
      - name: serverName
        variable:
          value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
          jmesPath: 'to_string(@)'
      - name: bearerToken
        variable:
          value: "{{ request.object.data.token | base64_decode(@) }}"
          jmesPath: 'to_string(@)'
      - name: caData
        variable:
          value: "{{ request.object.data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
          jmesPath: 'to_string(@)'
      - name: dataConfig
        variable:
          value: |
            {
              "bearerToken": "{{ bearerToken }}",
              "tlsClientConfig": {
                "insecure": false,
                "caData": "{{ caData }}"
              }
            }
          jmesPath: 'to_string(@)'
      generate:
        synchronize: true
        apiVersion: v1
        kind: Secret
        name: "{{ clusterPrefixedName }}"
        namespace: argocd
        data:
          metadata:
            labels:
              argocd.argoproj.io/secret-type: cluster
              clusterId: "{{ clusterName }}"
          type: Opaque
          data:
            name: "{{ clusterPrefixedName | base64_encode(@) }}"
            server: "{{ serverName | base64_encode(@) }}"
            config: "{{ dataConfig | base64_encode(@) }}"
